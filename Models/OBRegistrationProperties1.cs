/*
 * Dynamic Client Registration API
 *
 * This specification defines the APIs for a TPP to submit a Software Statement Assertion to an ASPSP for the purpose of creating OAuth clients that are registered with ASPSP. 
 *
 * OpenAPI spec version: v3.1-RC1
 * Contact: ServiceDesk@openbanking.org.uk
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OBRegistrationProperties1 : IEquatable<OBRegistrationProperties1>
    { 
        /// <summary>
        /// OAuth 2.0 client identifier string
        /// </summary>
        /// <value>OAuth 2.0 client identifier string</value>
        [DataMember(Name="client_id")]
        public string ClientId { get; set; }

        /// <summary>
        /// OAuth 2.0 client secret string
        /// </summary>
        /// <value>OAuth 2.0 client secret string</value>
        [DataMember(Name="client_secret")]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC
        /// </summary>
        /// <value>Time at which the client identifier was issued expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC</value>
        [DataMember(Name="client_id_issued_at")]
        public int? ClientIdIssuedAt { get; set; }

        /// <summary>
        /// Time at which the client secret will expire expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC. Set to 0 if does not expire
        /// </summary>
        /// <value>Time at which the client secret will expire expressed as seconds since 1970-01-01T00:00:00Z as measured in UTC. Set to 0 if does not expire</value>
        [DataMember(Name="client_secret_expires_at")]
        public int? ClientSecretExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUris
        /// </summary>
        [Required]
        [DataMember(Name="redirect_uris")]
        public List<string> RedirectUris { get; set; }

        /// <summary>
        /// Gets or Sets TokenEndpointAuthMethod
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TokenEndpointAuthMethodEnum
        {
            
            /// <summary>
            /// Enum PrivateKeyJwtEnum for private_key_jwt
            /// </summary>
            [EnumMember(Value = "private_key_jwt")]
            PrivateKeyJwtEnum = 1,
            
            /// <summary>
            /// Enum TlsClientAuthEnum for tls_client_auth
            /// </summary>
            [EnumMember(Value = "tls_client_auth")]
            TlsClientAuthEnum = 2
        }

        /// <summary>
        /// Gets or Sets TokenEndpointAuthMethod
        /// </summary>
        [Required]
        [DataMember(Name="token_endpoint_auth_method")]
        public TokenEndpointAuthMethodEnum? TokenEndpointAuthMethod { get; set; }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum List&lt;GrantTypesEnum&gt;
        {
            
            /// <summary>
            /// Enum ClientCredentialsEnum for client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentialsEnum = 1,
            
            /// <summary>
            /// Enum AuthorizationCodeEnum for authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCodeEnum = 2,
            
            /// <summary>
            /// Enum RefreshTokenEnum for refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            RefreshTokenEnum = 3
        }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum GrantTypesEnum
        {
            
            /// <summary>
            /// Enum ClientCredentialsEnum for client_credentials
            /// </summary>
            [EnumMember(Value = "client_credentials")]
            ClientCredentialsEnum = 1,
            
            /// <summary>
            /// Enum AuthorizationCodeEnum for authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            AuthorizationCodeEnum = 2,
            
            /// <summary>
            /// Enum RefreshTokenEnum for refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            RefreshTokenEnum = 3
        }

        /// <summary>
        /// Gets or Sets GrantTypes
        /// </summary>
        [Required]
        [DataMember(Name="grant_types")]
        public List<GrantTypesEnum> GrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum List&lt;ResponseTypesEnum&gt;
        {
            
            /// <summary>
            /// Enum CodeEnum for code
            /// </summary>
            [EnumMember(Value = "code")]
            CodeEnum = 1,
            
            /// <summary>
            /// Enum CodeIdTokenEnum for code id_token
            /// </summary>
            [EnumMember(Value = "code id_token")]
            CodeIdTokenEnum = 2
        }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResponseTypesEnum
        {
            
            /// <summary>
            /// Enum CodeEnum for code
            /// </summary>
            [EnumMember(Value = "code")]
            CodeEnum = 1,
            
            /// <summary>
            /// Enum CodeIdTokenEnum for code id_token
            /// </summary>
            [EnumMember(Value = "code id_token")]
            CodeIdTokenEnum = 2
        }

        /// <summary>
        /// Gets or Sets ResponseTypes
        /// </summary>
        [DataMember(Name="response_types")]
        public List<ResponseTypesEnum> ResponseTypes { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareId
        /// </summary>
        [DataMember(Name="software_id")]
        public string SoftwareId { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope")]
        public List<string> Scope { get; set; }

        /// <summary>
        /// Gets or Sets SoftwareStatement
        /// </summary>
        [Required]
        [DataMember(Name="software_statement")]
        public string SoftwareStatement { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationType
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApplicationTypeEnum
        {
            
            /// <summary>
            /// Enum WebEnum for web
            /// </summary>
            [EnumMember(Value = "web")]
            WebEnum = 1,
            
            /// <summary>
            /// Enum MobileEnum for mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            MobileEnum = 2
        }

        /// <summary>
        /// Gets or Sets ApplicationType
        /// </summary>
        [Required]
        [DataMember(Name="application_type")]
        public ApplicationTypeEnum? ApplicationType { get; set; }

        /// <summary>
        /// Gets or Sets IdTokenSignedResponseAlg
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SupportedAlgorithms
        {
            
            /// <summary>
            /// Enum RS256Enum for RS256
            /// </summary>
            [EnumMember(Value = "RS256")]
            RS256Enum = 1,
            
            /// <summary>
            /// Enum PS256Enum for PS256
            /// </summary>
            [EnumMember(Value = "PS256")]
            PS256Enum = 2,
            
            /// <summary>
            /// Enum ES256Enum for ES256
            /// </summary>
            [EnumMember(Value = "ES256")]
            ES256Enum = 3
        }

        /// <summary>
        /// Gets or Sets IdTokenSignedResponseAlg
        /// </summary>
        [Required]
        [DataMember(Name="id_token_signed_response_alg")]
        public SupportedAlgorithms? IdTokenSignedResponseAlg { get; set; }

        /// <summary>
        /// Gets or Sets RequestObjectSigningAlg
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SupportedAlgorithms
        {
            
            /// <summary>
            /// Enum RS256Enum for RS256
            /// </summary>
            [EnumMember(Value = "RS256")]
            RS256Enum = 1,
            
            /// <summary>
            /// Enum PS256Enum for PS256
            /// </summary>
            [EnumMember(Value = "PS256")]
            PS256Enum = 2,
            
            /// <summary>
            /// Enum ES256Enum for ES256
            /// </summary>
            [EnumMember(Value = "ES256")]
            ES256Enum = 3
        }

        /// <summary>
        /// Gets or Sets RequestObjectSigningAlg
        /// </summary>
        [Required]
        [DataMember(Name="request_object_signing_alg")]
        public SupportedAlgorithms? RequestObjectSigningAlg { get; set; }

        /// <summary>
        /// Gets or Sets TokenEndpointAuthSigningAlg
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SupportedAlgorithms
        {
            
            /// <summary>
            /// Enum RS256Enum for RS256
            /// </summary>
            [EnumMember(Value = "RS256")]
            RS256Enum = 1,
            
            /// <summary>
            /// Enum PS256Enum for PS256
            /// </summary>
            [EnumMember(Value = "PS256")]
            PS256Enum = 2,
            
            /// <summary>
            /// Enum ES256Enum for ES256
            /// </summary>
            [EnumMember(Value = "ES256")]
            ES256Enum = 3
        }

        /// <summary>
        /// Gets or Sets TokenEndpointAuthSigningAlg
        /// </summary>
        [DataMember(Name="token_endpoint_auth_signing_alg")]
        public SupportedAlgorithms? TokenEndpointAuthSigningAlg { get; set; }

        /// <summary>
        /// Gets or Sets TlsClientAuthDn
        /// </summary>
        [Required]
        [DataMember(Name="tls_client_auth_dn")]
        public string TlsClientAuthDn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OBRegistrationProperties1 {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  ClientIdIssuedAt: ").Append(ClientIdIssuedAt).Append("\n");
            sb.Append("  ClientSecretExpiresAt: ").Append(ClientSecretExpiresAt).Append("\n");
            sb.Append("  RedirectUris: ").Append(RedirectUris).Append("\n");
            sb.Append("  TokenEndpointAuthMethod: ").Append(TokenEndpointAuthMethod).Append("\n");
            sb.Append("  GrantTypes: ").Append(GrantTypes).Append("\n");
            sb.Append("  ResponseTypes: ").Append(ResponseTypes).Append("\n");
            sb.Append("  SoftwareId: ").Append(SoftwareId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SoftwareStatement: ").Append(SoftwareStatement).Append("\n");
            sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
            sb.Append("  IdTokenSignedResponseAlg: ").Append(IdTokenSignedResponseAlg).Append("\n");
            sb.Append("  RequestObjectSigningAlg: ").Append(RequestObjectSigningAlg).Append("\n");
            sb.Append("  TokenEndpointAuthSigningAlg: ").Append(TokenEndpointAuthSigningAlg).Append("\n");
            sb.Append("  TlsClientAuthDn: ").Append(TlsClientAuthDn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OBRegistrationProperties1)obj);
        }

        /// <summary>
        /// Returns true if OBRegistrationProperties1 instances are equal
        /// </summary>
        /// <param name="other">Instance of OBRegistrationProperties1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OBRegistrationProperties1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientId == other.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(other.ClientId)
                ) && 
                (
                    ClientSecret == other.ClientSecret ||
                    ClientSecret != null &&
                    ClientSecret.Equals(other.ClientSecret)
                ) && 
                (
                    ClientIdIssuedAt == other.ClientIdIssuedAt ||
                    ClientIdIssuedAt != null &&
                    ClientIdIssuedAt.Equals(other.ClientIdIssuedAt)
                ) && 
                (
                    ClientSecretExpiresAt == other.ClientSecretExpiresAt ||
                    ClientSecretExpiresAt != null &&
                    ClientSecretExpiresAt.Equals(other.ClientSecretExpiresAt)
                ) && 
                (
                    RedirectUris == other.RedirectUris ||
                    RedirectUris != null &&
                    RedirectUris.SequenceEqual(other.RedirectUris)
                ) && 
                (
                    TokenEndpointAuthMethod == other.TokenEndpointAuthMethod ||
                    TokenEndpointAuthMethod != null &&
                    TokenEndpointAuthMethod.Equals(other.TokenEndpointAuthMethod)
                ) && 
                (
                    GrantTypes == other.GrantTypes ||
                    GrantTypes != null &&
                    GrantTypes.SequenceEqual(other.GrantTypes)
                ) && 
                (
                    ResponseTypes == other.ResponseTypes ||
                    ResponseTypes != null &&
                    ResponseTypes.SequenceEqual(other.ResponseTypes)
                ) && 
                (
                    SoftwareId == other.SoftwareId ||
                    SoftwareId != null &&
                    SoftwareId.Equals(other.SoftwareId)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.SequenceEqual(other.Scope)
                ) && 
                (
                    SoftwareStatement == other.SoftwareStatement ||
                    SoftwareStatement != null &&
                    SoftwareStatement.Equals(other.SoftwareStatement)
                ) && 
                (
                    ApplicationType == other.ApplicationType ||
                    ApplicationType != null &&
                    ApplicationType.Equals(other.ApplicationType)
                ) && 
                (
                    IdTokenSignedResponseAlg == other.IdTokenSignedResponseAlg ||
                    IdTokenSignedResponseAlg != null &&
                    IdTokenSignedResponseAlg.Equals(other.IdTokenSignedResponseAlg)
                ) && 
                (
                    RequestObjectSigningAlg == other.RequestObjectSigningAlg ||
                    RequestObjectSigningAlg != null &&
                    RequestObjectSigningAlg.Equals(other.RequestObjectSigningAlg)
                ) && 
                (
                    TokenEndpointAuthSigningAlg == other.TokenEndpointAuthSigningAlg ||
                    TokenEndpointAuthSigningAlg != null &&
                    TokenEndpointAuthSigningAlg.Equals(other.TokenEndpointAuthSigningAlg)
                ) && 
                (
                    TlsClientAuthDn == other.TlsClientAuthDn ||
                    TlsClientAuthDn != null &&
                    TlsClientAuthDn.Equals(other.TlsClientAuthDn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                    if (ClientSecret != null)
                    hashCode = hashCode * 59 + ClientSecret.GetHashCode();
                    if (ClientIdIssuedAt != null)
                    hashCode = hashCode * 59 + ClientIdIssuedAt.GetHashCode();
                    if (ClientSecretExpiresAt != null)
                    hashCode = hashCode * 59 + ClientSecretExpiresAt.GetHashCode();
                    if (RedirectUris != null)
                    hashCode = hashCode * 59 + RedirectUris.GetHashCode();
                    if (TokenEndpointAuthMethod != null)
                    hashCode = hashCode * 59 + TokenEndpointAuthMethod.GetHashCode();
                    if (GrantTypes != null)
                    hashCode = hashCode * 59 + GrantTypes.GetHashCode();
                    if (ResponseTypes != null)
                    hashCode = hashCode * 59 + ResponseTypes.GetHashCode();
                    if (SoftwareId != null)
                    hashCode = hashCode * 59 + SoftwareId.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    if (SoftwareStatement != null)
                    hashCode = hashCode * 59 + SoftwareStatement.GetHashCode();
                    if (ApplicationType != null)
                    hashCode = hashCode * 59 + ApplicationType.GetHashCode();
                    if (IdTokenSignedResponseAlg != null)
                    hashCode = hashCode * 59 + IdTokenSignedResponseAlg.GetHashCode();
                    if (RequestObjectSigningAlg != null)
                    hashCode = hashCode * 59 + RequestObjectSigningAlg.GetHashCode();
                    if (TokenEndpointAuthSigningAlg != null)
                    hashCode = hashCode * 59 + TokenEndpointAuthSigningAlg.GetHashCode();
                    if (TlsClientAuthDn != null)
                    hashCode = hashCode * 59 + TlsClientAuthDn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OBRegistrationProperties1 left, OBRegistrationProperties1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OBRegistrationProperties1 left, OBRegistrationProperties1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
